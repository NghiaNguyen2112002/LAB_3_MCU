
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800276c  0800276c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800276c  0800276c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000002c  080027a0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080027a0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091da  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c75  00000000  00000000  0002922f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cdd  00000000  00000000  0002c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd67  00000000  00000000  00043005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082286  00000000  00000000  0004ed6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0ff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a84  00000000  00000000  000d1044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002734 	.word	0x08002734

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002734 	.word	0x08002734

0800014c <init_fsm_mode>:
enum MODE {NORMAL, MODI_RED, MODI_AMBER, MODI_GREEN};
enum MODE mode;

int8_t counter_TIME;

void init_fsm_mode(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	lightMode = RUN;
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <init_fsm_mode+0x20>)
 8000152:	2200      	movs	r2, #0
 8000154:	701a      	strb	r2, [r3, #0]
	mode = NORMAL;
 8000156:	4b06      	ldr	r3, [pc, #24]	; (8000170 <init_fsm_mode+0x24>)
 8000158:	2200      	movs	r2, #0
 800015a:	701a      	strb	r2, [r3, #0]
	counter_TIME = 0;
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <init_fsm_mode+0x28>)
 800015e:	2200      	movs	r2, #0
 8000160:	701a      	strb	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000048 	.word	0x20000048
 8000170:	20000049 	.word	0x20000049
 8000174:	2000004a 	.word	0x2000004a

08000178 <isLightNormal>:

uint8_t isLightNormal(void){
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	return (lightMode == RUN);
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <isLightNormal+0x1c>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	bf0c      	ite	eq
 8000184:	2301      	moveq	r3, #1
 8000186:	2300      	movne	r3, #0
 8000188:	b2db      	uxtb	r3, r3
}
 800018a:	4618      	mov	r0, r3
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000048 	.word	0x20000048

08000198 <isBlinkRed>:
uint8_t isBlinkRed(void){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	return (lightMode == BLINK_RED);
 800019c:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <isBlinkRed+0x1c>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	bf0c      	ite	eq
 80001a4:	2301      	moveq	r3, #1
 80001a6:	2300      	movne	r3, #0
 80001a8:	b2db      	uxtb	r3, r3
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000048 	.word	0x20000048

080001b8 <isBlinkAmber>:
uint8_t isBlinkAmber(void){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	return (lightMode == BLINK_AMBER);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <isBlinkAmber+0x1c>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b02      	cmp	r3, #2
 80001c2:	bf0c      	ite	eq
 80001c4:	2301      	moveq	r3, #1
 80001c6:	2300      	movne	r3, #0
 80001c8:	b2db      	uxtb	r3, r3
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000048 	.word	0x20000048

080001d8 <isBlinkGreen>:
uint8_t isBlinkGreen(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	return (lightMode == BLINK_GREEN);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <isBlinkGreen+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b03      	cmp	r3, #3
 80001e2:	bf0c      	ite	eq
 80001e4:	2301      	moveq	r3, #1
 80001e6:	2300      	movne	r3, #0
 80001e8:	b2db      	uxtb	r3, r3
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000048 	.word	0x20000048

080001f8 <fsm_mode>:

void fsm_mode(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	switch(mode){
 80001fc:	4b91      	ldr	r3, [pc, #580]	; (8000444 <fsm_mode+0x24c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b03      	cmp	r3, #3
 8000202:	f200 8114 	bhi.w	800042e <fsm_mode+0x236>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <fsm_mode+0x14>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	0800021d 	.word	0x0800021d
 8000210:	08000243 	.word	0x08000243
 8000214:	080002e9 	.word	0x080002e9
 8000218:	0800038d 	.word	0x0800038d
	case NORMAL:

		lightMode = RUN;
 800021c:	4b8a      	ldr	r3, [pc, #552]	; (8000448 <fsm_mode+0x250>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
		if(is_button_pressed(SEL)) {
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f982 	bl	800052c <is_button_pressed>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	f000 8101 	beq.w	8000432 <fsm_mode+0x23a>
			LightOff();
 8000230:	f000 fdc4 	bl	8000dbc <LightOff>
			counter_TIME = 0;				//reset counter TIME
 8000234:	4b85      	ldr	r3, [pc, #532]	; (800044c <fsm_mode+0x254>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
			mode = MODI_RED;
 800023a:	4b82      	ldr	r3, [pc, #520]	; (8000444 <fsm_mode+0x24c>)
 800023c:	2201      	movs	r2, #1
 800023e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000240:	e0f7      	b.n	8000432 <fsm_mode+0x23a>
	case MODI_RED:

		lightMode = BLINK_RED;
 8000242:	4b81      	ldr	r3, [pc, #516]	; (8000448 <fsm_mode+0x250>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
		UpdateLed7SegBuffer(TIME_RED + counter_TIME, 11);
 8000248:	4b81      	ldr	r3, [pc, #516]	; (8000450 <fsm_mode+0x258>)
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b7f      	ldr	r3, [pc, #508]	; (800044c <fsm_mode+0x254>)
 800024e:	f993 3000 	ldrsb.w	r3, [r3]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	4413      	add	r3, r2
 8000256:	b2db      	uxtb	r3, r3
 8000258:	210b      	movs	r1, #11
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fa72 	bl	8000744 <UpdateLed7SegBuffer>

		if(is_button_pressed(MODI))	{
 8000260:	2001      	movs	r0, #1
 8000262:	f000 f963 	bl	800052c <is_button_pressed>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d01a      	beq.n	80002a2 <fsm_mode+0xaa>
			if(TIME_RED + counter_TIME < 99) counter_TIME++;
 800026c:	4b78      	ldr	r3, [pc, #480]	; (8000450 <fsm_mode+0x258>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	4b76      	ldr	r3, [pc, #472]	; (800044c <fsm_mode+0x254>)
 8000274:	f993 3000 	ldrsb.w	r3, [r3]
 8000278:	4413      	add	r3, r2
 800027a:	2b62      	cmp	r3, #98	; 0x62
 800027c:	dc09      	bgt.n	8000292 <fsm_mode+0x9a>
 800027e:	4b73      	ldr	r3, [pc, #460]	; (800044c <fsm_mode+0x254>)
 8000280:	f993 3000 	ldrsb.w	r3, [r3]
 8000284:	b2db      	uxtb	r3, r3
 8000286:	3301      	adds	r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	b25a      	sxtb	r2, r3
 800028c:	4b6f      	ldr	r3, [pc, #444]	; (800044c <fsm_mode+0x254>)
 800028e:	701a      	strb	r2, [r3, #0]
 8000290:	e007      	b.n	80002a2 <fsm_mode+0xaa>
			else counter_TIME = 1 - TIME_RED;
 8000292:	4b6f      	ldr	r3, [pc, #444]	; (8000450 <fsm_mode+0x258>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	f1c3 0301 	rsb	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	b25a      	sxtb	r2, r3
 800029e:	4b6b      	ldr	r3, [pc, #428]	; (800044c <fsm_mode+0x254>)
 80002a0:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(SET)) {
 80002a2:	2002      	movs	r0, #2
 80002a4:	f000 f942 	bl	800052c <is_button_pressed>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d00c      	beq.n	80002c8 <fsm_mode+0xd0>
			TIME_RED += counter_TIME;
 80002ae:	4b68      	ldr	r3, [pc, #416]	; (8000450 <fsm_mode+0x258>)
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	4b66      	ldr	r3, [pc, #408]	; (800044c <fsm_mode+0x254>)
 80002b4:	f993 3000 	ldrsb.w	r3, [r3]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4413      	add	r3, r2
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b64      	ldr	r3, [pc, #400]	; (8000450 <fsm_mode+0x258>)
 80002c0:	701a      	strb	r2, [r3, #0]
			counter_TIME = 0;
 80002c2:	4b62      	ldr	r3, [pc, #392]	; (800044c <fsm_mode+0x254>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(SEL)) {
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 f92f 	bl	800052c <is_button_pressed>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	f000 80b0 	beq.w	8000436 <fsm_mode+0x23e>
			LightOff();
 80002d6:	f000 fd71 	bl	8000dbc <LightOff>
			counter_TIME = 0;				//reset counter TIME
 80002da:	4b5c      	ldr	r3, [pc, #368]	; (800044c <fsm_mode+0x254>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
			mode = MODI_AMBER;
 80002e0:	4b58      	ldr	r3, [pc, #352]	; (8000444 <fsm_mode+0x24c>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80002e6:	e0a6      	b.n	8000436 <fsm_mode+0x23e>
	case MODI_AMBER:

		lightMode = BLINK_AMBER;
 80002e8:	4b57      	ldr	r3, [pc, #348]	; (8000448 <fsm_mode+0x250>)
 80002ea:	2202      	movs	r2, #2
 80002ec:	701a      	strb	r2, [r3, #0]
		UpdateLed7SegBuffer(TIME_AMBER + counter_TIME, 22);
 80002ee:	4b59      	ldr	r3, [pc, #356]	; (8000454 <fsm_mode+0x25c>)
 80002f0:	781a      	ldrb	r2, [r3, #0]
 80002f2:	4b56      	ldr	r3, [pc, #344]	; (800044c <fsm_mode+0x254>)
 80002f4:	f993 3000 	ldrsb.w	r3, [r3]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4413      	add	r3, r2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2116      	movs	r1, #22
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fa1f 	bl	8000744 <UpdateLed7SegBuffer>


		if(is_button_pressed(MODI)){
 8000306:	2001      	movs	r0, #1
 8000308:	f000 f910 	bl	800052c <is_button_pressed>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d01a      	beq.n	8000348 <fsm_mode+0x150>
			if(TIME_AMBER + counter_TIME < 99) counter_TIME++;
 8000312:	4b50      	ldr	r3, [pc, #320]	; (8000454 <fsm_mode+0x25c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b4c      	ldr	r3, [pc, #304]	; (800044c <fsm_mode+0x254>)
 800031a:	f993 3000 	ldrsb.w	r3, [r3]
 800031e:	4413      	add	r3, r2
 8000320:	2b62      	cmp	r3, #98	; 0x62
 8000322:	dc09      	bgt.n	8000338 <fsm_mode+0x140>
 8000324:	4b49      	ldr	r3, [pc, #292]	; (800044c <fsm_mode+0x254>)
 8000326:	f993 3000 	ldrsb.w	r3, [r3]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	3301      	adds	r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	b25a      	sxtb	r2, r3
 8000332:	4b46      	ldr	r3, [pc, #280]	; (800044c <fsm_mode+0x254>)
 8000334:	701a      	strb	r2, [r3, #0]
 8000336:	e007      	b.n	8000348 <fsm_mode+0x150>
			else counter_TIME = 1 - TIME_AMBER;
 8000338:	4b46      	ldr	r3, [pc, #280]	; (8000454 <fsm_mode+0x25c>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	f1c3 0301 	rsb	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	b25a      	sxtb	r2, r3
 8000344:	4b41      	ldr	r3, [pc, #260]	; (800044c <fsm_mode+0x254>)
 8000346:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(SET)) {
 8000348:	2002      	movs	r0, #2
 800034a:	f000 f8ef 	bl	800052c <is_button_pressed>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d00c      	beq.n	800036e <fsm_mode+0x176>
			TIME_AMBER += counter_TIME;
 8000354:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <fsm_mode+0x25c>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b3c      	ldr	r3, [pc, #240]	; (800044c <fsm_mode+0x254>)
 800035a:	f993 3000 	ldrsb.w	r3, [r3]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4413      	add	r3, r2
 8000362:	b2da      	uxtb	r2, r3
 8000364:	4b3b      	ldr	r3, [pc, #236]	; (8000454 <fsm_mode+0x25c>)
 8000366:	701a      	strb	r2, [r3, #0]
			counter_TIME = 0;
 8000368:	4b38      	ldr	r3, [pc, #224]	; (800044c <fsm_mode+0x254>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(SEL)) {
 800036e:	2000      	movs	r0, #0
 8000370:	f000 f8dc 	bl	800052c <is_button_pressed>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d05f      	beq.n	800043a <fsm_mode+0x242>
			LightOff();
 800037a:	f000 fd1f 	bl	8000dbc <LightOff>
			counter_TIME = 0;				//reset counter TIME
 800037e:	4b33      	ldr	r3, [pc, #204]	; (800044c <fsm_mode+0x254>)
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
			mode = MODI_GREEN;
 8000384:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <fsm_mode+0x24c>)
 8000386:	2203      	movs	r2, #3
 8000388:	701a      	strb	r2, [r3, #0]
		}
		break;
 800038a:	e056      	b.n	800043a <fsm_mode+0x242>
	case MODI_GREEN:

		lightMode = BLINK_GREEN;
 800038c:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <fsm_mode+0x250>)
 800038e:	2203      	movs	r2, #3
 8000390:	701a      	strb	r2, [r3, #0]
		UpdateLed7SegBuffer(TIME_GREEN + counter_TIME, 33);
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <fsm_mode+0x260>)
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <fsm_mode+0x254>)
 8000398:	f993 3000 	ldrsb.w	r3, [r3]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4413      	add	r3, r2
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2121      	movs	r1, #33	; 0x21
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f9cd 	bl	8000744 <UpdateLed7SegBuffer>


		if(is_button_pressed(MODI)){
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 f8be 	bl	800052c <is_button_pressed>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d01a      	beq.n	80003ec <fsm_mode+0x1f4>
			if(TIME_GREEN + counter_TIME < 99) counter_TIME++;
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <fsm_mode+0x260>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	461a      	mov	r2, r3
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <fsm_mode+0x254>)
 80003be:	f993 3000 	ldrsb.w	r3, [r3]
 80003c2:	4413      	add	r3, r2
 80003c4:	2b62      	cmp	r3, #98	; 0x62
 80003c6:	dc09      	bgt.n	80003dc <fsm_mode+0x1e4>
 80003c8:	4b20      	ldr	r3, [pc, #128]	; (800044c <fsm_mode+0x254>)
 80003ca:	f993 3000 	ldrsb.w	r3, [r3]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	3301      	adds	r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	b25a      	sxtb	r2, r3
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <fsm_mode+0x254>)
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e007      	b.n	80003ec <fsm_mode+0x1f4>
			else counter_TIME = 1 - TIME_GREEN;
 80003dc:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <fsm_mode+0x260>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	f1c3 0301 	rsb	r3, r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	b25a      	sxtb	r2, r3
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <fsm_mode+0x254>)
 80003ea:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(SET)) {
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 f89d 	bl	800052c <is_button_pressed>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00c      	beq.n	8000412 <fsm_mode+0x21a>
			TIME_GREEN += counter_TIME;
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <fsm_mode+0x260>)
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <fsm_mode+0x254>)
 80003fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000402:	b2db      	uxtb	r3, r3
 8000404:	4413      	add	r3, r2
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <fsm_mode+0x260>)
 800040a:	701a      	strb	r2, [r3, #0]
			counter_TIME = 0;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <fsm_mode+0x254>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
		}

		if(is_button_pressed(SEL)) {
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f88a 	bl	800052c <is_button_pressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00f      	beq.n	800043e <fsm_mode+0x246>
			LightOff();
 800041e:	f000 fccd 	bl	8000dbc <LightOff>
			Reset_Light();
 8000422:	f000 fcfb 	bl	8000e1c <Reset_Light>
			mode = NORMAL;
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <fsm_mode+0x24c>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800042c:	e007      	b.n	800043e <fsm_mode+0x246>
	default:
		break;
 800042e:	bf00      	nop
 8000430:	e006      	b.n	8000440 <fsm_mode+0x248>
		break;
 8000432:	bf00      	nop
 8000434:	e004      	b.n	8000440 <fsm_mode+0x248>
		break;
 8000436:	bf00      	nop
 8000438:	e002      	b.n	8000440 <fsm_mode+0x248>
		break;
 800043a:	bf00      	nop
 800043c:	e000      	b.n	8000440 <fsm_mode+0x248>
		break;
 800043e:	bf00      	nop
	}
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000049 	.word	0x20000049
 8000448:	20000048 	.word	0x20000048
 800044c:	2000004a 	.word	0x2000004a
 8000450:	20000000 	.word	0x20000000
 8000454:	20000001 	.word	0x20000001
 8000458:	20000002 	.word	0x20000002

0800045c <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void){
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000462:	2300      	movs	r3, #0
 8000464:	71fb      	strb	r3, [r7, #7]
 8000466:	e04a      	b.n	80004fe <button_reading+0xa2>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000468:	79fa      	ldrb	r2, [r7, #7]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4928      	ldr	r1, [pc, #160]	; (8000510 <button_reading+0xb4>)
 800046e:	5c89      	ldrb	r1, [r1, r2]
 8000470:	4a28      	ldr	r2, [pc, #160]	; (8000514 <button_reading+0xb8>)
 8000472:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4a28      	ldr	r2, [pc, #160]	; (8000518 <button_reading+0xbc>)
 8000478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	4927      	ldr	r1, [pc, #156]	; (800051c <button_reading+0xc0>)
 8000480:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000484:	79fc      	ldrb	r4, [r7, #7]
 8000486:	4619      	mov	r1, r3
 8000488:	4610      	mov	r0, r2
 800048a:	f001 f913 	bl	80016b4 <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <button_reading+0xb4>)
 8000494:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <button_reading+0xb4>)
 800049a:	5cd2      	ldrb	r2, [r2, r3]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	491d      	ldr	r1, [pc, #116]	; (8000514 <button_reading+0xb8>)
 80004a0:	5ccb      	ldrb	r3, [r1, r3]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d128      	bne.n	80004f8 <button_reading+0x9c>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	4919      	ldr	r1, [pc, #100]	; (8000510 <button_reading+0xb4>)
 80004ac:	5c89      	ldrb	r1, [r1, r2]
 80004ae:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <button_reading+0xc4>)
 80004b0:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <button_reading+0xc4>)
 80004b6:	5cd3      	ldrb	r3, [r2, r3]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d114      	bne.n	80004e6 <button_reading+0x8a>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4a19      	ldr	r2, [pc, #100]	; (8000524 <button_reading+0xc8>)
 80004c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c4:	2b63      	cmp	r3, #99	; 0x63
 80004c6:	d809      	bhi.n	80004dc <button_reading+0x80>
					counterForButtonPress1s[i]++;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	4a16      	ldr	r2, [pc, #88]	; (8000524 <button_reading+0xc8>)
 80004cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004d0:	3201      	adds	r2, #1
 80004d2:	b291      	uxth	r1, r2
 80004d4:	4a13      	ldr	r2, [pc, #76]	; (8000524 <button_reading+0xc8>)
 80004d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80004da:	e00d      	b.n	80004f8 <button_reading+0x9c>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <button_reading+0xcc>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	54d1      	strb	r1, [r2, r3]
 80004e4:	e008      	b.n	80004f8 <button_reading+0x9c>
					//todo
				}
			} else {
				counterForButtonPress1s[i] = 0;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <button_reading+0xc8>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <button_reading+0xcc>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	3301      	adds	r3, #1
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d9b1      	bls.n	8000468 <button_reading+0xc>
			}
		}
	}
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bd90      	pop	{r4, r7, pc}
 800050e:	bf00      	nop
 8000510:	2000004c 	.word	0x2000004c
 8000514:	20000050 	.word	0x20000050
 8000518:	2000000c 	.word	0x2000000c
 800051c:	20000004 	.word	0x20000004
 8000520:	20000018 	.word	0x20000018
 8000524:	20000058 	.word	0x20000058
 8000528:	20000054 	.word	0x20000054

0800052c <is_button_pressed>:
unsigned char is_button_pressed(unsigned char index){
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d901      	bls.n	8000540 <is_button_pressed+0x14>
 800053c:	2300      	movs	r3, #0
 800053e:	e00f      	b.n	8000560 <is_button_pressed+0x34>

	if(buttonBuffer[index] == BUTTON_IS_PRESSED){
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <is_button_pressed+0x40>)
 8000544:	5cd3      	ldrb	r3, [r2, r3]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d109      	bne.n	800055e <is_button_pressed+0x32>
		return (counterForButtonPress1s[index] == 1);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <is_button_pressed+0x44>)
 800054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000552:	2b01      	cmp	r3, #1
 8000554:	bf0c      	ite	eq
 8000556:	2301      	moveq	r3, #1
 8000558:	2300      	movne	r3, #0
 800055a:	b2db      	uxtb	r3, r3
 800055c:	e000      	b.n	8000560 <is_button_pressed+0x34>
	}
	return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000018 	.word	0x20000018
 8000570:	20000058 	.word	0x20000058

08000574 <Enable7Seg>:

#include "led_7_seg.h"

static uint8_t led7SegBuffer[4]		= { 0, 0, 0, 0 };

void Enable7Seg(uint8_t index){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_7SEG) return;
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d840      	bhi.n	8000606 <Enable7Seg+0x92>

	switch(index){
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d83f      	bhi.n	800060a <Enable7Seg+0x96>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <Enable7Seg+0x1c>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005b9 	.word	0x080005b9
 8000598:	080005d3 	.word	0x080005d3
 800059c:	080005ed 	.word	0x080005ed
	case 0:
		HAL_GPIO_WritePin(LED_7SEG_PORT, en0_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	481b      	ldr	r0, [pc, #108]	; (8000614 <Enable7Seg+0xa0>)
 80005a6:	f001 f89c 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7SEG_PORT, en1_Pin | en2_Pin | en3_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80005b0:	4818      	ldr	r0, [pc, #96]	; (8000614 <Enable7Seg+0xa0>)
 80005b2:	f001 f896 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80005b6:	e029      	b.n	800060c <Enable7Seg+0x98>
	case 1:
		HAL_GPIO_WritePin(LED_7SEG_PORT, en1_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <Enable7Seg+0xa0>)
 80005c0:	f001 f88f 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7SEG_PORT, en0_Pin | en2_Pin | en3_Pin, SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <Enable7Seg+0xa0>)
 80005cc:	f001 f889 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80005d0:	e01c      	b.n	800060c <Enable7Seg+0x98>
	case 2:
		HAL_GPIO_WritePin(LED_7SEG_PORT, en2_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <Enable7Seg+0xa0>)
 80005da:	f001 f882 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7SEG_PORT, en0_Pin | en1_Pin | en3_Pin, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <Enable7Seg+0xa0>)
 80005e6:	f001 f87c 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80005ea:	e00f      	b.n	800060c <Enable7Seg+0x98>
	case 3:
		HAL_GPIO_WritePin(LED_7SEG_PORT, en3_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <Enable7Seg+0xa0>)
 80005f4:	f001 f875 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7SEG_PORT, en0_Pin | en1_Pin | en2_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <Enable7Seg+0xa0>)
 8000600:	f001 f86f 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 8000604:	e002      	b.n	800060c <Enable7Seg+0x98>
	if(index >= NO_OF_7SEG) return;
 8000606:	bf00      	nop
 8000608:	e000      	b.n	800060c <Enable7Seg+0x98>
	default:
		break;
 800060a:	bf00      	nop
	}
}
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010c00 	.word	0x40010c00

08000618 <Display7Seg>:

void Display7Seg(uint8_t num){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	if(num > 9) return;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b09      	cmp	r3, #9
 8000626:	f200 8084 	bhi.w	8000732 <Display7Seg+0x11a>
	switch(num){
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b09      	cmp	r3, #9
 800062e:	f200 8082 	bhi.w	8000736 <Display7Seg+0x11e>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <Display7Seg+0x20>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000661 	.word	0x08000661
 800063c:	08000677 	.word	0x08000677
 8000640:	0800068d 	.word	0x0800068d
 8000644:	080006a3 	.word	0x080006a3
 8000648:	080006b9 	.word	0x080006b9
 800064c:	080006cf 	.word	0x080006cf
 8000650:	080006e5 	.word	0x080006e5
 8000654:	080006fb 	.word	0x080006fb
 8000658:	08000711 	.word	0x08000711
 800065c:	0800071d 	.word	0x0800071d
	case 0:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | b_Pin | c_Pin |
 8000660:	2200      	movs	r2, #0
 8000662:	213f      	movs	r1, #63	; 0x3f
 8000664:	4836      	ldr	r0, [pc, #216]	; (8000740 <Display7Seg+0x128>)
 8000666:	f001 f83c 	bl	80016e2 <HAL_GPIO_WritePin>
										d_Pin | e_Pin | f_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, g_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4834      	ldr	r0, [pc, #208]	; (8000740 <Display7Seg+0x128>)
 8000670:	f001 f837 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 8000674:	e060      	b.n	8000738 <Display7Seg+0x120>
	case 1:
		HAL_GPIO_WritePin(LED_7SEG_PORT, b_Pin | c_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2106      	movs	r1, #6
 800067a:	4831      	ldr	r0, [pc, #196]	; (8000740 <Display7Seg+0x128>)
 800067c:	f001 f831 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | d_Pin | e_Pin |
 8000680:	2201      	movs	r2, #1
 8000682:	2179      	movs	r1, #121	; 0x79
 8000684:	482e      	ldr	r0, [pc, #184]	; (8000740 <Display7Seg+0x128>)
 8000686:	f001 f82c 	bl	80016e2 <HAL_GPIO_WritePin>
										f_Pin | g_Pin, SET);
		break;
 800068a:	e055      	b.n	8000738 <Display7Seg+0x120>
	case 2:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | b_Pin | d_Pin |
 800068c:	2200      	movs	r2, #0
 800068e:	215b      	movs	r1, #91	; 0x5b
 8000690:	482b      	ldr	r0, [pc, #172]	; (8000740 <Display7Seg+0x128>)
 8000692:	f001 f826 	bl	80016e2 <HAL_GPIO_WritePin>
										e_Pin | g_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, f_Pin | c_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2124      	movs	r1, #36	; 0x24
 800069a:	4829      	ldr	r0, [pc, #164]	; (8000740 <Display7Seg+0x128>)
 800069c:	f001 f821 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80006a0:	e04a      	b.n	8000738 <Display7Seg+0x120>
	case 3:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | b_Pin | c_Pin |
 80006a2:	2200      	movs	r2, #0
 80006a4:	214f      	movs	r1, #79	; 0x4f
 80006a6:	4826      	ldr	r0, [pc, #152]	; (8000740 <Display7Seg+0x128>)
 80006a8:	f001 f81b 	bl	80016e2 <HAL_GPIO_WritePin>
									d_Pin | g_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, f_Pin | e_Pin, SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2130      	movs	r1, #48	; 0x30
 80006b0:	4823      	ldr	r0, [pc, #140]	; (8000740 <Display7Seg+0x128>)
 80006b2:	f001 f816 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80006b6:	e03f      	b.n	8000738 <Display7Seg+0x120>
	case 4:
		HAL_GPIO_WritePin(LED_7SEG_PORT, b_Pin | c_Pin | f_Pin |
 80006b8:	2200      	movs	r2, #0
 80006ba:	2166      	movs	r1, #102	; 0x66
 80006bc:	4820      	ldr	r0, [pc, #128]	; (8000740 <Display7Seg+0x128>)
 80006be:	f001 f810 	bl	80016e2 <HAL_GPIO_WritePin>
									g_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | e_Pin | d_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2119      	movs	r1, #25
 80006c6:	481e      	ldr	r0, [pc, #120]	; (8000740 <Display7Seg+0x128>)
 80006c8:	f001 f80b 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80006cc:	e034      	b.n	8000738 <Display7Seg+0x120>
	case 5:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | f_Pin | c_Pin |
 80006ce:	2200      	movs	r2, #0
 80006d0:	216d      	movs	r1, #109	; 0x6d
 80006d2:	481b      	ldr	r0, [pc, #108]	; (8000740 <Display7Seg+0x128>)
 80006d4:	f001 f805 	bl	80016e2 <HAL_GPIO_WritePin>
									d_Pin | g_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, b_Pin | e_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2112      	movs	r1, #18
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <Display7Seg+0x128>)
 80006de:	f001 f800 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80006e2:	e029      	b.n	8000738 <Display7Seg+0x120>
	case 6:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | f_Pin | c_Pin |
 80006e4:	2200      	movs	r2, #0
 80006e6:	217d      	movs	r1, #125	; 0x7d
 80006e8:	4815      	ldr	r0, [pc, #84]	; (8000740 <Display7Seg+0x128>)
 80006ea:	f000 fffa 	bl	80016e2 <HAL_GPIO_WritePin>
									d_Pin | e_Pin | g_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, b_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2102      	movs	r1, #2
 80006f2:	4813      	ldr	r0, [pc, #76]	; (8000740 <Display7Seg+0x128>)
 80006f4:	f000 fff5 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 80006f8:	e01e      	b.n	8000738 <Display7Seg+0x120>
	case 7:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | b_Pin | c_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2107      	movs	r1, #7
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <Display7Seg+0x128>)
 8000700:	f000 ffef 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7SEG_PORT, d_Pin | e_Pin | f_Pin | g_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2178      	movs	r1, #120	; 0x78
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <Display7Seg+0x128>)
 800070a:	f000 ffea 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 800070e:	e013      	b.n	8000738 <Display7Seg+0x120>
	case 8:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | b_Pin | c_Pin |
 8000710:	2200      	movs	r2, #0
 8000712:	217f      	movs	r1, #127	; 0x7f
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <Display7Seg+0x128>)
 8000716:	f000 ffe4 	bl	80016e2 <HAL_GPIO_WritePin>
									d_Pin | e_Pin | f_Pin | g_Pin, RESET);
		break;
 800071a:	e00d      	b.n	8000738 <Display7Seg+0x120>
	case 9:
		HAL_GPIO_WritePin(LED_7SEG_PORT, a_Pin | b_Pin | c_Pin |
 800071c:	2200      	movs	r2, #0
 800071e:	216f      	movs	r1, #111	; 0x6f
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <Display7Seg+0x128>)
 8000722:	f000 ffde 	bl	80016e2 <HAL_GPIO_WritePin>
									d_Pin | f_Pin | g_Pin, RESET);
		HAL_GPIO_WritePin(LED_7SEG_PORT, e_Pin, SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2110      	movs	r1, #16
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <Display7Seg+0x128>)
 800072c:	f000 ffd9 	bl	80016e2 <HAL_GPIO_WritePin>
		break;
 8000730:	e002      	b.n	8000738 <Display7Seg+0x120>
	if(num > 9) return;
 8000732:	bf00      	nop
 8000734:	e000      	b.n	8000738 <Display7Seg+0x120>
	default:
		break;
 8000736:	bf00      	nop
	}
}
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40010c00 	.word	0x40010c00

08000744 <UpdateLed7SegBuffer>:

void UpdateLed7SegBuffer(uint8_t time1, uint8_t time2){
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
	if(time1 >= 0 && time1 <= 99){
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b63      	cmp	r3, #99	; 0x63
 8000758:	d814      	bhi.n	8000784 <UpdateLed7SegBuffer+0x40>
		led7SegBuffer[0] = time1 / 10;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <UpdateLed7SegBuffer+0x7c>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	08db      	lsrs	r3, r3, #3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <UpdateLed7SegBuffer+0x80>)
 8000768:	701a      	strb	r2, [r3, #0]
		led7SegBuffer[1] = time1 % 10;
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <UpdateLed7SegBuffer+0x7c>)
 800076e:	fba3 1302 	umull	r1, r3, r3, r2
 8000772:	08d9      	lsrs	r1, r3, #3
 8000774:	460b      	mov	r3, r1
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <UpdateLed7SegBuffer+0x80>)
 8000782:	705a      	strb	r2, [r3, #1]
	}

	if(time2 >= 0 && time2 <= 99){
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b63      	cmp	r3, #99	; 0x63
 8000788:	d814      	bhi.n	80007b4 <UpdateLed7SegBuffer+0x70>
		led7SegBuffer[2] = time2 / 10;
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <UpdateLed7SegBuffer+0x7c>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <UpdateLed7SegBuffer+0x80>)
 8000798:	709a      	strb	r2, [r3, #2]
		led7SegBuffer[3] = time2 % 10;
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <UpdateLed7SegBuffer+0x7c>)
 800079e:	fba3 1302 	umull	r1, r3, r3, r2
 80007a2:	08d9      	lsrs	r1, r3, #3
 80007a4:	460b      	mov	r3, r1
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <UpdateLed7SegBuffer+0x80>)
 80007b2:	70da      	strb	r2, [r3, #3]
	}
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	cccccccd 	.word	0xcccccccd
 80007c4:	20000060 	.word	0x20000060

080007c8 <Update7Seg>:

void Update7Seg(uint8_t index){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	if(index >= 0 && index <= 3){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d809      	bhi.n	80007ec <Update7Seg+0x24>
		Enable7Seg(index);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff feca 	bl	8000574 <Enable7Seg>
		Display7Seg( led7SegBuffer[index] );
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <Update7Seg+0x2c>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff16 	bl	8000618 <Display7Seg>
	}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000060 	.word	0x20000060

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fc6d 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f869 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f8ef 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800080a:	f000 f8a1 	bl	8000950 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2);
 800080e:	4831      	ldr	r0, [pc, #196]	; (80008d4 <main+0xdc>)
 8000810:	f001 fbd0 	bl	8001fb4 <HAL_TIM_Base_Start_IT>

  uint8_t index_led7Seg = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	71fb      	strb	r3, [r7, #7]
//  Traffic_Light_Run();

  init_fsm_mode();
 8000818:	f7ff fc98 	bl	800014c <init_fsm_mode>

  SetTimer_0(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f000 f9c9 	bl	8000bb4 <SetTimer_0>
  SetTimer_1(1000); //timer for traffic light
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 f9e1 	bl	8000bec <SetTimer_1>
  SetTimer_2(50);	//timer for update 4 7segleds
 800082a:	2032      	movs	r0, #50	; 0x32
 800082c:	f000 f9fa 	bl	8000c24 <SetTimer_2>
  SetTimer_3(500);  //timer for blink led with 2Hz frequency
 8000830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000834:	f000 fa12 	bl	8000c5c <SetTimer_3>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FlagTimer_0()){
 8000838:	f000 fa86 	bl	8000d48 <FlagTimer_0>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d004      	beq.n	800084c <main+0x54>
		  SetTimer_0(10);
 8000842:	200a      	movs	r0, #10
 8000844:	f000 f9b6 	bl	8000bb4 <SetTimer_0>
		  fsm_mode();
 8000848:	f7ff fcd6 	bl	80001f8 <fsm_mode>
	  }

	  if(FlagTimer_1()){
 800084c:	f000 fa86 	bl	8000d5c <FlagTimer_1>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <main+0x74>
		  SetTimer_1(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	f000 f9c7 	bl	8000bec <SetTimer_1>
		  if(isLightNormal()) Traffic_Light_Run();
 800085e:	f7ff fc8b 	bl	8000178 <isLightNormal>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <main+0x74>
 8000868:	f000 fbde 	bl	8001028 <Traffic_Light_Run>

	  }
	  if(FlagTimer_2()){
 800086c:	f000 fa80 	bl	8000d70 <FlagTimer_2>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00d      	beq.n	8000892 <main+0x9a>
		  SetTimer_2(50);
 8000876:	2032      	movs	r0, #50	; 0x32
 8000878:	f000 f9d4 	bl	8000c24 <SetTimer_2>
		  if(index_led7Seg >= 4) index_led7Seg = 0;
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d901      	bls.n	8000886 <main+0x8e>
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
		  Update7Seg(index_led7Seg++);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	71fa      	strb	r2, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff9b 	bl	80007c8 <Update7Seg>
	  }
	  if(FlagTimer_3()){
 8000892:	f000 fa77 	bl	8000d84 <FlagTimer_3>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0cd      	beq.n	8000838 <main+0x40>
		  SetTimer_3(500);
 800089c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a0:	f000 f9dc 	bl	8000c5c <SetTimer_3>
		  if(isBlinkRed()) Blink_Red();
 80008a4:	f7ff fc78 	bl	8000198 <isBlinkRed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <main+0xbc>
 80008ae:	f000 fa91 	bl	8000dd4 <Blink_Red>
 80008b2:	e7c1      	b.n	8000838 <main+0x40>
		  else if(isBlinkAmber()) Blink_Amber();
 80008b4:	f7ff fc80 	bl	80001b8 <isBlinkAmber>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <main+0xcc>
 80008be:	f000 fa95 	bl	8000dec <Blink_Amber>
 80008c2:	e7b9      	b.n	8000838 <main+0x40>
		  else if(isBlinkGreen()) Blink_Green();
 80008c4:	f7ff fc88 	bl	80001d8 <isBlinkGreen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0b4      	beq.n	8000838 <main+0x40>
 80008ce:	f000 fa99 	bl	8000e04 <Blink_Green>
	  if(FlagTimer_0()){
 80008d2:	e7b1      	b.n	8000838 <main+0x40>
 80008d4:	20000064 	.word	0x20000064

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 ff1c 	bl	8002724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f000 ff18 	bl	8001744 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800091a:	f000 f8c7 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f986 	bl	8001c48 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000942:	f000 f8b3 	bl	8000aac <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3740      	adds	r7, #64	; 0x40
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM2_Init+0x94>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000976:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800097a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM2_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000984:	2209      	movs	r2, #9
 8000986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_TIM2_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000996:	f001 fabd 	bl	8001f14 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a0:	f000 f884 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_TIM2_Init+0x94>)
 80009b2:	f001 fc53 	bl	800225c <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009bc:	f000 f876 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_TIM2_Init+0x94>)
 80009ce:	f001 fe1b 	bl	8002608 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f868 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000064 	.word	0x20000064

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0xb8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <MX_GPIO_Init+0xb8>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0xb8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0xb8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0xb8>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0xb8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|en3_Pin
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000a32:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_GPIO_Init+0xbc>)
 8000a34:	f000 fe55 	bl	80016e2 <HAL_GPIO_WritePin>
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |en0_Pin|en1_Pin|en2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_0_Pin|AMBER_0_Pin|GREEN_0_Pin|RED_1_Pin
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000a3e:	481a      	ldr	r0, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0xc0>)
 8000a40:	f000 fe4f 	bl	80016e2 <HAL_GPIO_WritePin>
                          |AMBER_1_Pin|GREEN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL_BUTTON_Pin MODI_BUTTON_Pin SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = SEL_BUTTON_Pin|MODI_BUTTON_Pin|SET_BUTTON_Pin;
 8000a44:	23e0      	movs	r3, #224	; 0xe0
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0xc0>)
 8000a58:	f000 fcb0 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin en3_Pin
                           d_Pin e_Pin f_Pin g_Pin
                           en0_Pin en1_Pin en2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|en3_Pin
 8000a5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a60:	60bb      	str	r3, [r7, #8]
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |en0_Pin|en1_Pin|en2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0xbc>)
 8000a76:	f000 fca1 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_0_Pin AMBER_0_Pin GREEN_0_Pin RED_1_Pin
                           AMBER_1_Pin GREEN_1_Pin */
  GPIO_InitStruct.Pin = RED_0_Pin|AMBER_0_Pin|GREEN_0_Pin|RED_1_Pin
 8000a7a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8000a7e:	60bb      	str	r3, [r7, #8]
                          |AMBER_1_Pin|GREEN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0xc0>)
 8000a94:	f000 fc92 	bl	80013bc <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	40010800 	.word	0x40010800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_MspInit+0x40>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_MspInit+0x40>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_MspInit+0x40>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x40>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_MspInit+0x40>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_MspInit+0x40>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201c      	movs	r0, #28
 8000b2c:	f000 fc0f 	bl	800134e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b30:	201c      	movs	r0, #28
 8000b32:	f000 fc28 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 faed 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM2_IRQHandler+0x10>)
 8000b9a:	f001 fa57 	bl	800204c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000064 	.word	0x20000064

08000ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SetTimer_0>:

static uint8_t		flag_timer_3		= 0;
static uint8_t		counter_timer_3 	= 0;


void SetTimer_0(uint16_t duration){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	counter_timer_0 = duration / TIME_CYCLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SetTimer_0+0x2c>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SetTimer_0+0x30>)
 8000bce:	701a      	strb	r2, [r3, #0]
	flag_timer_0 = 0;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SetTimer_0+0x34>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	20000020 	.word	0x20000020
 8000be4:	200000ad 	.word	0x200000ad
 8000be8:	200000ac 	.word	0x200000ac

08000bec <SetTimer_1>:
void SetTimer_1(uint16_t duration){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	counter_timer_1 = duration / TIME_CYCLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <SetTimer_1+0x2c>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	88fa      	ldrh	r2, [r7, #6]
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SetTimer_1+0x30>)
 8000c06:	701a      	strb	r2, [r3, #0]
	flag_timer_1 = 0;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SetTimer_1+0x34>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000020 	.word	0x20000020
 8000c1c:	200000af 	.word	0x200000af
 8000c20:	200000ae 	.word	0x200000ae

08000c24 <SetTimer_2>:

void SetTimer_2(uint16_t duration){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	counter_timer_2 = duration / TIME_CYCLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <SetTimer_2+0x2c>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SetTimer_2+0x30>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	flag_timer_2 = 0;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SetTimer_2+0x34>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000020 	.word	0x20000020
 8000c54:	200000b1 	.word	0x200000b1
 8000c58:	200000b0 	.word	0x200000b0

08000c5c <SetTimer_3>:

void SetTimer_3(uint16_t duration){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	counter_timer_3 = duration / TIME_CYCLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <SetTimer_3+0x2c>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SetTimer_3+0x30>)
 8000c76:	701a      	strb	r2, [r3, #0]
	flag_timer_3 = 0;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SetTimer_3+0x34>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	200000b3 	.word	0x200000b3
 8000c90:	200000b2 	.word	0x200000b2

08000c94 <RunSoftwareTimer>:

void RunSoftwareTimer(void){
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	if(counter_timer_0 > 0){
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <RunSoftwareTimer+0x94>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00c      	beq.n	8000cba <RunSoftwareTimer+0x26>
		counter_timer_0--;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <RunSoftwareTimer+0x94>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <RunSoftwareTimer+0x94>)
 8000caa:	701a      	strb	r2, [r3, #0]
		if(counter_timer_0 == 0){
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <RunSoftwareTimer+0x94>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <RunSoftwareTimer+0x26>
			flag_timer_0 = 1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <RunSoftwareTimer+0x98>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_1 > 0){
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <RunSoftwareTimer+0x9c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00c      	beq.n	8000cdc <RunSoftwareTimer+0x48>
		counter_timer_1--;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <RunSoftwareTimer+0x9c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <RunSoftwareTimer+0x9c>)
 8000ccc:	701a      	strb	r2, [r3, #0]
		if(counter_timer_1 == 0){
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <RunSoftwareTimer+0x9c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <RunSoftwareTimer+0x48>
			flag_timer_1 = 1;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <RunSoftwareTimer+0xa0>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_2 > 0){
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <RunSoftwareTimer+0xa4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00c      	beq.n	8000cfe <RunSoftwareTimer+0x6a>
		counter_timer_2--;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <RunSoftwareTimer+0xa4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <RunSoftwareTimer+0xa4>)
 8000cee:	701a      	strb	r2, [r3, #0]
		if(counter_timer_2 == 0){
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <RunSoftwareTimer+0xa4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <RunSoftwareTimer+0x6a>
			flag_timer_2 = 1;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <RunSoftwareTimer+0xa8>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_3 > 0){
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <RunSoftwareTimer+0xac>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00c      	beq.n	8000d20 <RunSoftwareTimer+0x8c>
		counter_timer_3--;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <RunSoftwareTimer+0xac>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <RunSoftwareTimer+0xac>)
 8000d10:	701a      	strb	r2, [r3, #0]
		if(counter_timer_3 == 0){
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <RunSoftwareTimer+0xac>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <RunSoftwareTimer+0x8c>
			flag_timer_3 = 1;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <RunSoftwareTimer+0xb0>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	200000ad 	.word	0x200000ad
 8000d2c:	200000ac 	.word	0x200000ac
 8000d30:	200000af 	.word	0x200000af
 8000d34:	200000ae 	.word	0x200000ae
 8000d38:	200000b1 	.word	0x200000b1
 8000d3c:	200000b0 	.word	0x200000b0
 8000d40:	200000b3 	.word	0x200000b3
 8000d44:	200000b2 	.word	0x200000b2

08000d48 <FlagTimer_0>:

uint8_t FlagTimer_0(void){
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return flag_timer_0;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <FlagTimer_0+0x10>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	200000ac 	.word	0x200000ac

08000d5c <FlagTimer_1>:
uint8_t FlagTimer_1(void){
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	return flag_timer_1;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <FlagTimer_1+0x10>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	200000ae 	.word	0x200000ae

08000d70 <FlagTimer_2>:

uint8_t FlagTimer_2(void){
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return flag_timer_2;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <FlagTimer_2+0x10>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	200000b0 	.word	0x200000b0

08000d84 <FlagTimer_3>:

uint8_t FlagTimer_3(void){
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	return flag_timer_3;
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <FlagTimer_3+0x10>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	200000b2 	.word	0x200000b2

08000d98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da8:	d103      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 8000daa:	f7ff ff73 	bl	8000c94 <RunSoftwareTimer>
		button_reading();
 8000dae:	f7ff fb55 	bl	800045c <button_reading>
	}
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <LightOff>:

static int8_t	timeLight_0 	= 0;
static int8_t	timeLight_1 	= 0;


void LightOff(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_LIGHT, RED_0_Pin|AMBER_0_Pin|GREEN_0_Pin|RED_1_Pin
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <LightOff+0x14>)
 8000dc8:	f000 fc8b 	bl	80016e2 <HAL_GPIO_WritePin>
	                          |AMBER_1_Pin|GREEN_1_Pin, GPIO_PIN_RESET);
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <Blink_Red>:

void Blink_Red(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORT_LIGHT, RED_0_Pin | RED_1_Pin);
 8000dd8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <Blink_Red+0x14>)
 8000dde:	f000 fc98 	bl	8001712 <HAL_GPIO_TogglePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40010800 	.word	0x40010800

08000dec <Blink_Amber>:
void Blink_Amber(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORT_LIGHT, AMBER_0_Pin | AMBER_1_Pin);
 8000df0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <Blink_Amber+0x14>)
 8000df6:	f000 fc8c 	bl	8001712 <HAL_GPIO_TogglePin>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010800 	.word	0x40010800

08000e04 <Blink_Green>:
void Blink_Green(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORT_LIGHT, GREEN_0_Pin | GREEN_1_Pin);
 8000e08:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <Blink_Green+0x14>)
 8000e0e:	f000 fc80 	bl	8001712 <HAL_GPIO_TogglePin>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010800 	.word	0x40010800

08000e1c <Reset_Light>:
void UpdateTime_Green(uint8_t duration){
	if(duration > 99) return;
	TIME_GREEN = duration;
}

void Reset_Light(void){
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	state_light_0 = INIT; timeLight_0 = 0;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <Reset_Light+0x24>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <Reset_Light+0x28>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	state_light_1 = INIT; timeLight_1 = 0;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <Reset_Light+0x2c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <Reset_Light+0x30>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	200000b4 	.word	0x200000b4
 8000e44:	200000b6 	.word	0x200000b6
 8000e48:	200000b5 	.word	0x200000b5
 8000e4c:	200000b7 	.word	0x200000b7

08000e50 <Traffic_Light_0>:

void Traffic_Light_0(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	switch(state_light_0){
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <Traffic_Light_0+0xd4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d85f      	bhi.n	8000f1c <Traffic_Light_0+0xcc>
 8000e5c:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <Traffic_Light_0+0x14>)
 8000e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e62:	bf00      	nop
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	08000ef3 	.word	0x08000ef3
 8000e6c:	08000ec9 	.word	0x08000ec9
 8000e70:	08000e9f 	.word	0x08000e9f
	case INIT:
		timeLight_0 = TIME_RED;
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <Traffic_Light_0+0xd8>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <Traffic_Light_0+0xdc>)
 8000e7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, RED_0_Pin, SET);
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	482a      	ldr	r0, [pc, #168]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000e86:	f000 fc2c 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, AMBER_0_Pin | GREEN_0_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000e90:	4827      	ldr	r0, [pc, #156]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000e92:	f000 fc26 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_0 = RED_STATE;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <Traffic_Light_0+0xd4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
		break;
 8000e9c:	e03f      	b.n	8000f1e <Traffic_Light_0+0xce>
	case GREEN_STATE:
		timeLight_0 = TIME_AMBER;
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <Traffic_Light_0+0xe4>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <Traffic_Light_0+0xdc>)
 8000ea6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, AMBER_0_Pin, SET);
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eae:	4820      	ldr	r0, [pc, #128]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000eb0:	f000 fc17 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, RED_0_Pin | GREEN_0_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000ebc:	f000 fc11 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_0 = AMBER_STATE;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <Traffic_Light_0+0xd4>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	701a      	strb	r2, [r3, #0]
		break;
 8000ec6:	e02a      	b.n	8000f1e <Traffic_Light_0+0xce>
	case AMBER_STATE:
		timeLight_0 = TIME_RED;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <Traffic_Light_0+0xd8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <Traffic_Light_0+0xdc>)
 8000ed0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, RED_0_Pin, SET);
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4815      	ldr	r0, [pc, #84]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000eda:	f000 fc02 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, AMBER_0_Pin | GREEN_0_Pin, RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000ee4:	4812      	ldr	r0, [pc, #72]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000ee6:	f000 fbfc 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_0 = RED_STATE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <Traffic_Light_0+0xd4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
		break;
 8000ef0:	e015      	b.n	8000f1e <Traffic_Light_0+0xce>
	case RED_STATE:
		timeLight_0 = TIME_GREEN;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <Traffic_Light_0+0xe8>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <Traffic_Light_0+0xdc>)
 8000efa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, GREEN_0_Pin, SET);
 8000efc:	2202      	movs	r2, #2
 8000efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000f04:	f000 fbed 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, RED_0_Pin | AMBER_0_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <Traffic_Light_0+0xe0>)
 8000f10:	f000 fbe7 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_0 = GREEN_STATE;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <Traffic_Light_0+0xd4>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	701a      	strb	r2, [r3, #0]
		break;
 8000f1a:	e000      	b.n	8000f1e <Traffic_Light_0+0xce>
	default:
		break;
 8000f1c:	bf00      	nop
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000b4 	.word	0x200000b4
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	200000b6 	.word	0x200000b6
 8000f30:	40010800 	.word	0x40010800
 8000f34:	20000001 	.word	0x20000001
 8000f38:	20000002 	.word	0x20000002

08000f3c <Traffic_Light_1>:

void Traffic_Light_1(void){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	switch(state_light_1){
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <Traffic_Light_1+0xd4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d85f      	bhi.n	8001008 <Traffic_Light_1+0xcc>
 8000f48:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <Traffic_Light_1+0x14>)
 8000f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4e:	bf00      	nop
 8000f50:	08000f61 	.word	0x08000f61
 8000f54:	08000fdf 	.word	0x08000fdf
 8000f58:	08000fb5 	.word	0x08000fb5
 8000f5c:	08000f8b 	.word	0x08000f8b
	case INIT:
		timeLight_1 = TIME_GREEN;
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <Traffic_Light_1+0xd8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b25a      	sxtb	r2, r3
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <Traffic_Light_1+0xdc>)
 8000f68:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, GREEN_1_Pin, SET);
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	482a      	ldr	r0, [pc, #168]	; (800101c <Traffic_Light_1+0xe0>)
 8000f72:	f000 fbb6 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, RED_1_Pin | AMBER_1_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000f7c:	4827      	ldr	r0, [pc, #156]	; (800101c <Traffic_Light_1+0xe0>)
 8000f7e:	f000 fbb0 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_1 = GREEN_STATE;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <Traffic_Light_1+0xd4>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	701a      	strb	r2, [r3, #0]
		break;
 8000f88:	e03f      	b.n	800100a <Traffic_Light_1+0xce>
	case GREEN_STATE:
		timeLight_1 = TIME_AMBER;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <Traffic_Light_1+0xe4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <Traffic_Light_1+0xdc>)
 8000f92:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, AMBER_1_Pin, SET);
 8000f94:	2202      	movs	r2, #2
 8000f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9a:	4820      	ldr	r0, [pc, #128]	; (800101c <Traffic_Light_1+0xe0>)
 8000f9c:	f000 fba1 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, RED_1_Pin | GREEN_1_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000fa6:	481d      	ldr	r0, [pc, #116]	; (800101c <Traffic_Light_1+0xe0>)
 8000fa8:	f000 fb9b 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_1 = AMBER_STATE;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <Traffic_Light_1+0xd4>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
		break;
 8000fb2:	e02a      	b.n	800100a <Traffic_Light_1+0xce>
	case AMBER_STATE:
		timeLight_1 = TIME_RED;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <Traffic_Light_1+0xe8>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <Traffic_Light_1+0xdc>)
 8000fbc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, RED_1_Pin, SET);
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <Traffic_Light_1+0xe0>)
 8000fc6:	f000 fb8c 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, AMBER_1_Pin | GREEN_1_Pin, RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <Traffic_Light_1+0xe0>)
 8000fd2:	f000 fb86 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_1 = RED_STATE;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <Traffic_Light_1+0xd4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
		break;
 8000fdc:	e015      	b.n	800100a <Traffic_Light_1+0xce>
	case RED_STATE:
		timeLight_1 = TIME_GREEN;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <Traffic_Light_1+0xd8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25a      	sxtb	r2, r3
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <Traffic_Light_1+0xdc>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PORT_LIGHT, GREEN_1_Pin, SET);
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <Traffic_Light_1+0xe0>)
 8000ff0:	f000 fb77 	bl	80016e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LIGHT, RED_1_Pin | AMBER_1_Pin, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <Traffic_Light_1+0xe0>)
 8000ffc:	f000 fb71 	bl	80016e2 <HAL_GPIO_WritePin>
		state_light_1 = GREEN_STATE;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <Traffic_Light_1+0xd4>)
 8001002:	2203      	movs	r2, #3
 8001004:	701a      	strb	r2, [r3, #0]
		break;
 8001006:	e000      	b.n	800100a <Traffic_Light_1+0xce>
	default:
		break;
 8001008:	bf00      	nop
	}
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000b5 	.word	0x200000b5
 8001014:	20000002 	.word	0x20000002
 8001018:	200000b7 	.word	0x200000b7
 800101c:	40010800 	.word	0x40010800
 8001020:	20000001 	.word	0x20000001
 8001024:	20000000 	.word	0x20000000

08001028 <Traffic_Light_Run>:

void Traffic_Light_Run(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	if(timeLight_0 <= 0){
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <Traffic_Light_Run+0x60>)
 800102e:	f993 3000 	ldrsb.w	r3, [r3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dc01      	bgt.n	800103a <Traffic_Light_Run+0x12>
		Traffic_Light_0();
 8001036:	f7ff ff0b 	bl	8000e50 <Traffic_Light_0>
	}
	if(timeLight_1 <= 0){
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <Traffic_Light_Run+0x64>)
 800103c:	f993 3000 	ldrsb.w	r3, [r3]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dc01      	bgt.n	8001048 <Traffic_Light_Run+0x20>
		Traffic_Light_1();
 8001044:	f7ff ff7a 	bl	8000f3c <Traffic_Light_1>
	}

	UpdateLed7SegBuffer(timeLight_0, timeLight_1);
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <Traffic_Light_Run+0x60>)
 800104a:	f993 3000 	ldrsb.w	r3, [r3]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <Traffic_Light_Run+0x64>)
 8001052:	f992 2000 	ldrsb.w	r2, [r2]
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb72 	bl	8000744 <UpdateLed7SegBuffer>
	timeLight_0--; timeLight_1--;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <Traffic_Light_Run+0x60>)
 8001062:	f993 3000 	ldrsb.w	r3, [r3]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b25a      	sxtb	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <Traffic_Light_Run+0x60>)
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <Traffic_Light_Run+0x64>)
 8001074:	f993 3000 	ldrsb.w	r3, [r3]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3b01      	subs	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b25a      	sxtb	r2, r3
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <Traffic_Light_Run+0x64>)
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000b6 	.word	0x200000b6
 800108c:	200000b7 	.word	0x200000b7

08001090 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010b6:	f7ff fd77 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f001 fb0f 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010be:	f7ff fb9b 	bl	80007f8 <main>
  bx lr
 80010c2:	4770      	bx	lr
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80010cc:	08002774 	.word	0x08002774
  ldr r2, =_sbss
 80010d0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80010d4:	200000bc 	.word	0x200000bc

080010d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC1_2_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x28>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x28>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f923 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fcde 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f93b 	bl	80013a2 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f903 	bl	800134e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000001c 	.word	0x2000001c
 8001160:	20000028 	.word	0x20000028
 8001164:	20000024 	.word	0x20000024

08001168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000028 	.word	0x20000028
 8001188:	200000b8 	.word	0x200000b8

0800118c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	200000b8 	.word	0x200000b8

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4906      	ldr	r1, [pc, #24]	; (8001238 <__NVIC_EnableIRQ+0x34>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f7ff ff90 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff2d 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff42 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff35 	bl	8001204 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffa2 	bl	80012f4 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e161      	b.n	8001694 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8150 	bne.w	800168e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a97      	ldr	r2, [pc, #604]	; (8001650 <HAL_GPIO_Init+0x294>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d05e      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 80013f8:	4a95      	ldr	r2, [pc, #596]	; (8001650 <HAL_GPIO_Init+0x294>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d875      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 80013fe:	4a95      	ldr	r2, [pc, #596]	; (8001654 <HAL_GPIO_Init+0x298>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d058      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001404:	4a93      	ldr	r2, [pc, #588]	; (8001654 <HAL_GPIO_Init+0x298>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d86f      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 800140a:	4a93      	ldr	r2, [pc, #588]	; (8001658 <HAL_GPIO_Init+0x29c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d052      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001410:	4a91      	ldr	r2, [pc, #580]	; (8001658 <HAL_GPIO_Init+0x29c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d869      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001416:	4a91      	ldr	r2, [pc, #580]	; (800165c <HAL_GPIO_Init+0x2a0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d04c      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 800141c:	4a8f      	ldr	r2, [pc, #572]	; (800165c <HAL_GPIO_Init+0x2a0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d863      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001422:	4a8f      	ldr	r2, [pc, #572]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d046      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001428:	4a8d      	ldr	r2, [pc, #564]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d85d      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d82a      	bhi.n	8001488 <HAL_GPIO_Init+0xcc>
 8001432:	2b12      	cmp	r3, #18
 8001434:	d859      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <HAL_GPIO_Init+0x80>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	080014b7 	.word	0x080014b7
 8001440:	08001491 	.word	0x08001491
 8001444:	080014a3 	.word	0x080014a3
 8001448:	080014e5 	.word	0x080014e5
 800144c:	080014eb 	.word	0x080014eb
 8001450:	080014eb 	.word	0x080014eb
 8001454:	080014eb 	.word	0x080014eb
 8001458:	080014eb 	.word	0x080014eb
 800145c:	080014eb 	.word	0x080014eb
 8001460:	080014eb 	.word	0x080014eb
 8001464:	080014eb 	.word	0x080014eb
 8001468:	080014eb 	.word	0x080014eb
 800146c:	080014eb 	.word	0x080014eb
 8001470:	080014eb 	.word	0x080014eb
 8001474:	080014eb 	.word	0x080014eb
 8001478:	080014eb 	.word	0x080014eb
 800147c:	080014eb 	.word	0x080014eb
 8001480:	08001499 	.word	0x08001499
 8001484:	080014ad 	.word	0x080014ad
 8001488:	4a76      	ldr	r2, [pc, #472]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148e:	e02c      	b.n	80014ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e029      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	3304      	adds	r3, #4
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e024      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	3308      	adds	r3, #8
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e01f      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	330c      	adds	r3, #12
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e01a      	b.n	80014ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014be:	2304      	movs	r3, #4
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e013      	b.n	80014ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014cc:	2308      	movs	r3, #8
 80014ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	611a      	str	r2, [r3, #16]
          break;
 80014d6:	e009      	b.n	80014ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	615a      	str	r2, [r3, #20]
          break;
 80014e2:	e003      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x130>
          break;
 80014ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2bff      	cmp	r3, #255	; 0xff
 80014f0:	d801      	bhi.n	80014f6 <HAL_GPIO_Init+0x13a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	e001      	b.n	80014fa <HAL_GPIO_Init+0x13e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d802      	bhi.n	8001508 <HAL_GPIO_Init+0x14c>
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x152>
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	3b08      	subs	r3, #8
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	210f      	movs	r1, #15
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	6a39      	ldr	r1, [r7, #32]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80a9 	beq.w	800168e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800153c:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a49      	ldr	r2, [pc, #292]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001554:	4a45      	ldr	r2, [pc, #276]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <HAL_GPIO_Init+0x2b4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e0>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3c      	ldr	r2, [pc, #240]	; (8001674 <HAL_GPIO_Init+0x2b8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3b      	ldr	r2, [pc, #236]	; (8001678 <HAL_GPIO_Init+0x2bc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1d8>
 8001590:	2302      	movs	r3, #2
 8001592:	e004      	b.n	800159e <HAL_GPIO_Init+0x1e2>
 8001594:	2303      	movs	r3, #3
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x1e2>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_GPIO_Init+0x1e2>
 800159c:	2300      	movs	r3, #0
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	f002 0203 	and.w	r2, r2, #3
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	4093      	lsls	r3, r2
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ae:	492f      	ldr	r1, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <HAL_GPIO_Init+0x2c0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	492b      	ldr	r1, [pc, #172]	; (800167c <HAL_GPIO_Init+0x2c0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_GPIO_Init+0x2c0>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4927      	ldr	r1, [pc, #156]	; (800167c <HAL_GPIO_Init+0x2c0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_GPIO_Init+0x2c0>)
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4921      	ldr	r1, [pc, #132]	; (800167c <HAL_GPIO_Init+0x2c0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	491d      	ldr	r1, [pc, #116]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001608:	4013      	ands	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_GPIO_Init+0x2c0>)
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	4917      	ldr	r1, [pc, #92]	; (800167c <HAL_GPIO_Init+0x2c0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4913      	ldr	r1, [pc, #76]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001630:	4013      	ands	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01f      	beq.n	8001680 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	490d      	ldr	r1, [pc, #52]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e01f      	b.n	800168e <HAL_GPIO_Init+0x2d2>
 800164e:	bf00      	nop
 8001650:	10320000 	.word	0x10320000
 8001654:	10310000 	.word	0x10310000
 8001658:	10220000 	.word	0x10220000
 800165c:	10210000 	.word	0x10210000
 8001660:	10120000 	.word	0x10120000
 8001664:	10110000 	.word	0x10110000
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000
 800167c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4909      	ldr	r1, [pc, #36]	; (80016b0 <HAL_GPIO_Init+0x2f4>)
 800168a:	4013      	ands	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f ae96 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	372c      	adds	r7, #44	; 0x2c
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
 80016ee:	4613      	mov	r3, r2
 80016f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f2:	787b      	ldrb	r3, [r7, #1]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016fe:	e003      	b.n	8001708 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001724:	887a      	ldrh	r2, [r7, #2]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	041a      	lsls	r2, r3, #16
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43d9      	mvns	r1, r3
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	400b      	ands	r3, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	611a      	str	r2, [r3, #16]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fcb4 	bl	800118c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fcb0 	bl	800118c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fca0 	bl	800118c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fc9c 	bl	800118c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fc55 	bl	800118c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc51 	bl	800118c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc34 	bl	800118c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fc30 	bl	800118c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fc14 	bl	800118c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fc10 	bl	800118c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 faa6 	bl	8001ed8 <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fbfa 	bl	800118c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fbf6 	bl	800118c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fbb7 	bl	800118c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fbb3 	bl	800118c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb67 	bl	800118c <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fb63 	bl	800118c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb51 	bl	800118c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb4d 	bl	800118c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb21 	bl	800118c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fb1d 	bl	800118c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff faf1 	bl	800118c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff faed 	bl	800118c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fada 	bl	800118c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fad6 	bl	800118c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff fa28 	bl	800118c <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fa24 	bl	800118c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f986 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	0800275c 	.word	0x0800275c
 8001e14:	2000001c 	.word	0x2000001c
 8001e18:	20000024 	.word	0x20000024

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b490      	push	{r4, r7}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e24:	1d3c      	adds	r4, r7, #4
 8001e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e2c:	f240 2301 	movw	r3, #513	; 0x201
 8001e30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x40>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x46>
 8001e5a:	e02b      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e5e:	623b      	str	r3, [r7, #32]
      break;
 8001e60:	e02b      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	0c9b      	lsrs	r3, r3, #18
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3328      	adds	r3, #40	; 0x28
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0c5b      	lsrs	r3, r3, #17
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	3328      	adds	r3, #40	; 0x28
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e96:	fb03 f202 	mul.w	r2, r3, r2
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	e004      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	623b      	str	r3, [r7, #32]
      break;
 8001eb2:	e002      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb6:	623b      	str	r3, [r7, #32]
      break;
 8001eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eba:	6a3b      	ldr	r3, [r7, #32]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc90      	pop	{r4, r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	0800274c 	.word	0x0800274c
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	007a1200 	.word	0x007a1200
 8001ed4:	003d0900 	.word	0x003d0900

08001ed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <RCC_Delay+0x34>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <RCC_Delay+0x38>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0a5b      	lsrs	r3, r3, #9
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ef4:	bf00      	nop
  }
  while (Delay --);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	60fa      	str	r2, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <RCC_Delay+0x1c>
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	2000001c 	.word	0x2000001c
 8001f10:	10624dd3 	.word	0x10624dd3

08001f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e041      	b.n	8001faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fdde 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 fa6a 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e035      	b.n	8002038 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_TIM_Base_Start_IT+0x90>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_TIM_Base_Start_IT+0x4e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d004      	beq.n	8002002 <HAL_TIM_Base_Start_IT+0x4e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_TIM_Base_Start_IT+0x94>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d111      	bne.n	8002026 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b06      	cmp	r3, #6
 8002012:	d010      	beq.n	8002036 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002024:	e007      	b.n	8002036 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40012c00 	.word	0x40012c00
 8002048:	40000400 	.word	0x40000400

0800204c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0202 	mvn.w	r2, #2
 8002078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f9b1 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9a4 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f9b3 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0204 	mvn.w	r2, #4
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f987 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f97a 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f989 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b08      	cmp	r3, #8
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0208 	mvn.w	r2, #8
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2204      	movs	r2, #4
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f95d 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f950 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f95f 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b10      	cmp	r3, #16
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2208      	movs	r2, #8
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f933 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f926 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f935 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d107      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0201 	mvn.w	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fde4 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d107      	bne.n	80021fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa67 	bl	80026ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d107      	bne.n	8002228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8f9 	bl	800241a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b20      	cmp	r3, #32
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b20      	cmp	r3, #32
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0220 	mvn.w	r2, #32
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa32 	bl	80026b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x18>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b3      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x180>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_ConfigClockSource+0xd0>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	f200 8087 	bhi.w	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	f000 8085 	beq.w	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d87f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d01a      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xa2>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d87b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d050      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x116>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d877      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d03c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xf6>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d873      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d058      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x136>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d86f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d064      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d86b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d060      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d867      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d05a      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022fc:	e062      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f000 f95c 	bl	80025ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002320:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	609a      	str	r2, [r3, #8]
      break;
 800232a:	e04e      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f000 f945 	bl	80025ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	609a      	str	r2, [r3, #8]
      break;
 8002350:	e03b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f8bc 	bl	80024dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f913 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8002370:	e02b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	f000 f8da 	bl	8002538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2160      	movs	r1, #96	; 0x60
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f903 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 8002390:	e01b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f89c 	bl	80024dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8f3 	bl	8002596 <TIM_ITRx_SetConfig>
      break;
 80023b0:	e00b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 f8ea 	bl	8002596 <TIM_ITRx_SetConfig>
        break;
 80023c2:	e002      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023c4:	bf00      	nop
 80023c6:	e000      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <TIM_Base_SetConfig+0xa8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <TIM_Base_SetConfig+0x28>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d003      	beq.n	8002454 <TIM_Base_SetConfig+0x28>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <TIM_Base_SetConfig+0xac>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d108      	bne.n	8002466 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <TIM_Base_SetConfig+0xa8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <TIM_Base_SetConfig+0x52>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002474:	d003      	beq.n	800247e <TIM_Base_SetConfig+0x52>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <TIM_Base_SetConfig+0xac>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d108      	bne.n	8002490 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <TIM_Base_SetConfig+0xa8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d103      	bne.n	80024c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	615a      	str	r2, [r3, #20]
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40000400 	.word	0x40000400

080024dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0201 	bic.w	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f023 030a 	bic.w	r3, r3, #10
 8002518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 0210 	bic.w	r2, r3, #16
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002562:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	031b      	lsls	r3, r3, #12
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002574:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	621a      	str	r2, [r3, #32]
}
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f043 0307 	orr.w	r3, r3, #7
 80025b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	609a      	str	r2, [r3, #8]
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800261c:	2302      	movs	r3, #2
 800261e:	e041      	b.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d004      	beq.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d10c      	bne.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800267e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	4313      	orrs	r3, r2
 8002688:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400

080026b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2600      	movs	r6, #0
 80026e0:	4d0c      	ldr	r5, [pc, #48]	; (8002714 <__libc_init_array+0x38>)
 80026e2:	4c0d      	ldr	r4, [pc, #52]	; (8002718 <__libc_init_array+0x3c>)
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	42a6      	cmp	r6, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	f000 f822 	bl	8002734 <_init>
 80026f0:	2600      	movs	r6, #0
 80026f2:	4d0a      	ldr	r5, [pc, #40]	; (800271c <__libc_init_array+0x40>)
 80026f4:	4c0a      	ldr	r4, [pc, #40]	; (8002720 <__libc_init_array+0x44>)
 80026f6:	1b64      	subs	r4, r4, r5
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	42a6      	cmp	r6, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	f855 3b04 	ldr.w	r3, [r5], #4
 8002704:	4798      	blx	r3
 8002706:	3601      	adds	r6, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	f855 3b04 	ldr.w	r3, [r5], #4
 800270e:	4798      	blx	r3
 8002710:	3601      	adds	r6, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	0800276c 	.word	0x0800276c
 8002718:	0800276c 	.word	0x0800276c
 800271c:	0800276c 	.word	0x0800276c
 8002720:	08002770 	.word	0x08002770

08002724 <memset>:
 8002724:	4603      	mov	r3, r0
 8002726:	4402      	add	r2, r0
 8002728:	4293      	cmp	r3, r2
 800272a:	d100      	bne.n	800272e <memset+0xa>
 800272c:	4770      	bx	lr
 800272e:	f803 1b01 	strb.w	r1, [r3], #1
 8002732:	e7f9      	b.n	8002728 <memset+0x4>

08002734 <_init>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	bf00      	nop
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr

08002740 <_fini>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr
